import logging
import asyncio
import os
from django.conf import settings

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')  # –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
import django

django.setup()
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from config import TOKEN, TELEGRAM_CHAT_ID
from orders.models import Flower, OrderHistory, Report  # –î–æ–±–∞–≤–∏–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
from asgiref.sync import sync_to_async  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
dp["bot"] = bot  # –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ `bot` –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å aiogram v3

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ sync_to_async –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django ORM –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
@sync_to_async
def get_flower_by_id(id):
    try:
        return Flower.objects.get(id=id)
    except Flower.DoesNotExist:
        return None

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(Command('start'))
@dp.message(Command('help'))
async def send_welcome(message: Message):
    logger.info(f"User {message.from_user.id} sent the /start command")
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –≤ Telegram
async def send_order_to_telegram(order_data):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {order_data['flower_name']} –≤ Telegram.")
    text = (
        f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üå∏ –ë—É–∫–µ—Ç: {order_data['flower_name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['cost']} ‚ÇΩ\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_date']}\n"
        f"üïë –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_time']}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_address']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}"
    )

    try:
        # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if settings.SITE_URL.startswith("http://127.0.0.1"):
            flower_image_path = os.path.join(settings.MEDIA_ROOT, order_data['flower_image'].lstrip('/media/'))
            logger.info(f"Local image path: {flower_image_path}")
            if os.path.exists(flower_image_path):
                with open(flower_image_path, 'rb') as photo:
                    await bot.send_photo(TELEGRAM_CHAT_ID, photo, caption=text, parse_mode='Markdown')
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            else:
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {flower_image_path}")
                await bot.send_message(TELEGRAM_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: {order_data['flower_name']}")

        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ngrok –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π URL
        else:
            flower_image_url = f"{settings.SITE_URL}{order_data['flower_image'].lstrip('/')}"
            await bot.send_photo(TELEGRAM_CHAT_ID, flower_image_url, caption=text, parse_mode='Markdown')

        logger.info("Order data sent successfully to Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram: {e}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
@dp.message(Command('order'))
async def order(message: Message):
    try:
        flower_id = int(message.text.split()[1])
        flower = await get_flower_by_id(flower_id)

        if not flower:
            await message.answer("–ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        order_data = {
            "flower_image": flower.image.url,
            "flower_name": flower.name,
            "cost": flower.price,
            "delivery_date": "2024-12-25",
            "delivery_time": "14:00",
            "delivery_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 10",
            "comment": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!"
        }

        text = (
            f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"üå∏ –ë—É–∫–µ—Ç: {order_data['flower_name']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['cost']} ‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_date']}\n"
            f"üïë –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_time']}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_address']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data['comment']}"
        )

        await message.answer_photo(order_data["flower_image"], caption=text, parse_mode=ParseMode.MARKDOWN)
        await send_order_to_telegram(order_data)

    except IndexError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –±—É–∫–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /order 3")
    except ValueError:
        await message.answer("ID –±—É–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥–∞ /repeat_order –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command('repeat_order'))
async def repeat_order(message: Message):
    try:
        last_order = await sync_to_async(lambda: OrderHistory.objects.filter(user__id=message.from_user.id).order_by('-completed_at').first())()

        if last_order:
            order_data = {
                "flower_image": last_order.flower.image.url,
                "flower_name": last_order.flower.name,
                "cost": last_order.cost,
                "delivery_date": last_order.delivery_date,
                "delivery_time": last_order.delivery_time,
                "delivery_address": last_order.delivery_address,
                "comment": last_order.comment or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            }

            await message.answer_photo(order_data["flower_image"],
                                       caption=f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑: {order_data['flower_name']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['cost']} —Ä—É–±",
                                       parse_mode=ParseMode.MARKDOWN)
            await send_order_to_telegram(order_data)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑.")
    except Exception as e:
        logger.error(f"Error while repeating order: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö
@dp.message(Command('report'))
async def send_report(message: Message):
    try:
        report = await sync_to_async(lambda: Report.objects.filter(date=django.utils.timezone.now().date()).first())()

        if report:
            text = (
                f"–û—Ç—á–µ—Ç –∑–∞ {report.date}:\n"
                f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {report.total_orders}\n"
                f"–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {report.total_sales} —Ä—É–±\n"
                f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {report.total_revenue} —Ä—É–±\n"
                f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {report.total_expenses} —Ä—É–±\n"
                f"–ü—Ä–∏–±—ã–ª—å: {report.profit} —Ä—É–±"
            )
        else:
            text = "–û—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."

        await message.answer(text)

    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    asyncio.run(main())
