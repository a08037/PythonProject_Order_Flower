import logging
import os
import requests
from django.db import models
from django.db.models import Sum, F
from django.contrib.auth.models import User
from django.conf import settings
from django.utils import timezone
from django.utils.timezone import now

logger = logging.getLogger(__name__)

class Flower(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    image = models.ImageField(upload_to='flowers/', verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¶–≤–µ—Ç–æ–∫'
        verbose_name_plural = '–¶–≤–µ—Ç—ã'

class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    session_key = models.CharField(max_length=40, null=True, blank=True, verbose_name="–ö–ª—é—á —Å–µ—Å—Å–∏–∏ –≥–æ—Å—Ç—è")
    created_at = models.DateTimeField(default=now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    def total_price(self):
        return sum(item.total_price() for item in self.items.all())

    def total_items(self):
        return sum(item.quantity for item in self.items.all())

    def __str__(self):
        if self.user:
            return f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username}"
        return f"–ö–æ—Ä–∑–∏–Ω–∞ –≥–æ—Å—Ç—è (—Å–µ—Å—Å–∏—è: {self.session_key})"

class CartItem(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name="items")
    flower = models.ForeignKey(Flower, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

    def total_price(self):
        return self.flower.price * self.quantity

    def __str__(self):
        return f"{self.quantity} x {self.flower.name} (–ö–æ—Ä–∑–∏–Ω–∞: {self.cart.id})"


class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    cart = models.OneToOneField('Cart', on_delete=models.CASCADE)
    delivery_date = models.DateField(verbose_name='–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
    delivery_time = models.TimeField(verbose_name='–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏')
    address = models.CharField(max_length=255, verbose_name='–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    guest_email = models.EmailField(null=True, blank=True, verbose_name='Email –≥–æ—Å—Ç—è')
    guest_phone = models.CharField(max_length=20, null=True, blank=True,
                                   verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω –≥–æ—Å—Ç—è')
    status = models.CharField(max_length=20, choices=[
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('confirmed', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
    ], default='pending')
    comment = models.TextField(null=True, blank=True, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order {self.id} for {self.user if self.user else 'Guest'}"

    def total_price(self):
        if self.cart:
            return self.cart.total_price()
        return 0

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.id} –æ—Ç {self.user.username}"

    def send_to_telegram(self):
        chat_id = settings.TELEGRAM_CHAT_ID
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"

        order_data = []
        for cart_item in self.cart.items.all():
            flower = cart_item.flower
            flower_image_url = settings.SITE_URL + settings.MEDIA_URL + flower.image.name.lstrip('/media')
            flower_image_path = flower.image.path

            if not os.path.exists(flower_image_path):
                logger.error(f"Image file not found: {flower_image_path}")
                continue

            order_data.append({
                "flower_image": flower_image_url,
                "cost": cart_item.total_price(),
                "name": flower.name,
                "quantity": cart_item.quantity,
            })

        text = "–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        for item in order_data:
            text += f"üå∏ –ë—É–∫–µ—Ç: {item['name']} x {item['quantity']}\n" \
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']} ‚ÇΩ\n"
        text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {self.delivery_date}\n" \
                f"üïë –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {self.delivery_time}\n" \
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {self.address}\n" \
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.comment if self.comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}"

        try:
            for item in order_data:
                    response = requests.post(url, data={
                        "chat_id": chat_id,
                        "caption": text,
                        "parse_mode": "Markdown",
                        "photo": item["flower_image"],
                    })

                    if response.status_code == 200:
                        logger.info("Order data sent successfully to Telegram.")
                    else:
                        logger.error(f"Failed to send order to Telegram: {response.text}")

        except Exception as e:
            logger.error(f"Error sending order to Telegram: {e}")

class Review(models.Model):
    flower = models.ForeignKey(Flower, related_name='reviews', on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.PositiveIntegerField(choices=[(i, i) for i in range(1, 6)], verbose_name='–†–µ–π—Ç–∏–Ω–≥ (1-5)')
    comment = models.TextField(null=True, blank=True, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–û—Ç–∑—ã–≤'
        verbose_name_plural = '–û—Ç–∑—ã–≤—ã'
        ordering = ['-created_at']

    def __str__(self):
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.user.username} –Ω–∞ {self.flower.name}"

class Report(models.Model):
    date = models.DateField(auto_now_add=True, verbose_name='–î–∞—Ç–∞')
    total_orders = models.IntegerField(default=0, verbose_name='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    total_sales = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂')
    total_revenue = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–±—â–∏–π –¥–æ—Ö–æ–¥')
    total_expenses = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã')
    profit = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–ü—Ä–∏–±—ã–ª—å')
    created_at = models.DateTimeField(default=timezone.now)

    def calculate_report(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        total_orders = Order.objects.filter(created_at__date=self.date).count()
        total_sales = Order.objects.filter(created_at__date=self.date).aggregate(Sum('total_price'))['total_price__sum'] or 0
        total_expenses = 1000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        total_revenue = total_sales
        profit = total_revenue - total_expenses

        self.total_orders = total_orders
        self.total_sales = total_sales
        self.total_revenue = total_revenue
        self.total_expenses = total_expenses
        self.profit = profit
        self.save()

    def __str__(self):
        return f"–û—Ç—á–µ—Ç –∑–∞ {self.date}"

    class Meta:
        verbose_name = '–û—Ç—á–µ—Ç'
        verbose_name_plural = '–û—Ç—á–µ—Ç—ã'
        ordering = ['-date']

class OrderHistory(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="order_history")
    flower = models.ForeignKey('Flower', on_delete=models.CASCADE)
    delivery_date = models.DateField()
    delivery_time = models.TimeField()
    delivery_address = models.CharField(max_length=255)
    comment = models.TextField(blank=True, null=True)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    completed_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order by {self.user.username} for {self.flower.name} on {self.completed_at}"

    class Meta:
        verbose_name = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞'
        verbose_name_plural = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'
        ordering = ['-completed_at']